* Write a manual of assumption we make about the videos in order to track everything
* The sand profile sometimes has two brightnesses - What's the origin of this?
	- Maybe we could fit both of them simultaneously
* Build collection of extracts from movies which are hard to analyze (use this for semi-automatic testing)
* Write script to be able to easily extract problematic parts of the video and save them in a separate file 
* Make logging reliable
* Distinguish between debug/develop/release runs:
	- different default level of output
	- debug doesn't use multiprocessing to keep error messages clean
	- different logging behavior (log to file for release run!)
	- different error behavior (use some catch all try/except and log the error instead of failing in release run)
* Burrows should be fitted to background frame
	- burrows might only need an update if the mouse (i.e. its explored area) is close
	- the burrow outline geometry should be checked for consistency (must be a simple line according to shapely)
	- we have to be more tolerant about bad burrow outlines (remove the ones, which collapsed to a line)
	- do linescans perpendicular to the centerline to find the burrow width
		- linescans can be implemented using cv2.getRotationMatrix2D and cv2.warpAffine
	- set burrow front by a different method (maybe just update it from explored area)
		- also, we could just do a linescan along the center line  

Performance improvements:
-------------------------
* Speed up sand profile fitting by having a library of profiles with certain angles and just matching these
	around the point of interest (move along perpendicular line, until overlap is maximal)
* Make sure that images and masks are not copied to often (rather use internal cache structures, which should be faster)
* Generally cache all kernels for morphological operations, since these are costly to make
* There are problems when ffmpeg can't encode the output videos fast enough:
	 - Presumably, the ffmpeg pipe gets full and the whole process just stops
* Lazy-load the extra data in a NestedDict
* Calculate the Jacobian for the fitting explicitly 


Low priority enhancements:
--------------------------
* Apparently, sometimes the light flickers and a frame becomes unusably bright.
	- Get an example video to see how we could circumvent this problem in our code
	- One idea is to just drop these frames and assume that not much happens during this time
* There is a memory leak somewhere. If the FirstPass object is deleted not all memory is released.
	- This should not pose any problems, since we usually only do one scan and then end the whole process
* Look into the possibility of writing a VideoFFMPEG class, which directly uses ffmpeg to read a video
	- This will give us more flexibility in reading videos (also with more control over parameters)
	- see https://github.com/Zulko/moviepy/blob/master/moviepy/video/io/ffmpeg_reader.py
	- This should also allow us to read the video in a separate process/thread, thus speeding up the
		processing 
	